Arrange elements in a given Linked List such that, all even numbers are placed after odd numbers. Respective order of elements should remain same.
Note: Input and Output has already managed for you. You don't need to print the elements, instead return the head of updated LL.


//newbee approach using hint vid but will lead to time limit exceed prob due to long chains formed
/*Node *evenAfterOdd(Node *head)
{
	//write your code here
	if(head==NULL) return head;
	if(head->next==NULL) return head;

	Node *oddhead=NULL;
	Node *oddtail=NULL;
    Node *evenhead=NULL;
    Node *eventail=NULL;

   
	while(head!=NULL)
{
	if(head->data%2 != 0 ) {
		if(oddhead==NULL)
        {
            oddhead=head;
            oddtail=head;
            head=head->next;
        }

                 else {
                              oddtail->next=head;
                              oddtail=head;
                              head=head->next;
                    }
        }
        else{
       if(evenhead==NULL)
        {
          evenhead=head;
            eventail=head;
            head=head->next;
        }

                 else {
                              eventail->next=head;
                              eventail=head;
                              head=head->next;
                    }
        }

        }
        if (oddhead != NULL) {
          oddtail->next = evenhead;
          return oddhead;
        } else
          return evenhead;
}*/

// more optimised below one 

Node* evenAfterOdd(Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    Node* oddhead = NULL;
    Node* oddtail = NULL;
    Node* evenhead = NULL;
    Node* eventail = NULL;

    while (head != NULL) {
        Node* nextNode = head->next;
        if (head->data % 2 != 0) {
            if (oddhead == NULL) {
                oddhead = head;
                oddtail = head;
            } else {
                oddtail->next = head;
                oddtail = head;
            }
        } else {
            if (evenhead == NULL) {
                evenhead = head;
                eventail = head;
            } else {
                eventail->next = head;
                eventail = head;
            }
        }
        head->next = NULL; //prevents creation of long chains hence more optimised
        head = nextNode;
    }

    if (oddhead != NULL) {
        oddtail->next = evenhead;
        return oddhead;
    } else {
        return evenhead;
    }
}
